#include "I2C.h"

/*Waiting TIMEOUT*/
#define I2CT_FLAG_TIMEOUT         ((uint32_t)0x1000)
#define I2CT_LONG_TIMEOUT         ((uint32_t)(10 * I2CT_FLAG_TIMEOUT))
static volatile uint32_t I2CTimeout = I2CT_LONG_TIMEOUT;


void I2CInit(void)
 {
    GPIO_Config_T gpioConfigStruct;
    I2C_Config_T i2cConfigStruct;
     /** Enable I2C related Clock */
    RCM_EnableAHBPeriphClock(RCM_AHB_PERIPH_GPIOB);
    RCM_EnableAPB1PeriphClock(RCM_APB1_PERIPH_I2C1);
    RCM_EnableAPB2PeriphClock(RCM_APB2_PERIPH_SYSCFG);


     /** Free I2C_SCL and I2C_SDA */
    gpioConfigStruct.mode = GPIO_MODE_OUT;
    gpioConfigStruct.speed = GPIO_SPEED_50MHz;
    gpioConfigStruct.outtype = GPIO_OUT_TYPE_PP;
    gpioConfigStruct.pupd = GPIO_PUPD_NO;
    gpioConfigStruct.pin = GPIO_PIN_6;
    GPIO_Config(GPIOB, &gpioConfigStruct);

    gpioConfigStruct.pin = GPIO_PIN_7;
    GPIO_Config(GPIOB, &gpioConfigStruct);

    GPIO_SetBit(GPIOB,GPIO_PIN_6);
    GPIO_SetBit(GPIOB,GPIO_PIN_7);

    /** Connect I2C to SCL */
    GPIO_ConfigPinAF(GPIOB, GPIO_PIN_SOURCE_6, GPIO_AF_PIN1);
    /** Connect I2C to SDA */
    GPIO_ConfigPinAF(GPIOB, GPIO_PIN_SOURCE_7, GPIO_AF_PIN1);
    /**  Config I2C1 GPIO */
    gpioConfigStruct.mode = GPIO_MODE_AF;
    gpioConfigStruct.speed = GPIO_SPEED_50MHz;
    gpioConfigStruct.outtype = GPIO_OUT_TYPE_OD;
    gpioConfigStruct.pupd = GPIO_PUPD_NO;
    gpioConfigStruct.pin = GPIO_PIN_6;
    GPIO_Config(GPIOB, &gpioConfigStruct);

    gpioConfigStruct.pin = GPIO_PIN_7;
    GPIO_Config(GPIOB, &gpioConfigStruct);

    /**  Config I2C1 */
    I2C_Reset(I2C1);
    RCM_ConfigI2CCLK(RCM_I2C1CLK_SYSCLK);
    i2cConfigStruct.ack = I2C_ACK_ENABLE;
    i2cConfigStruct.ackaddress = I2C_ACK_ADDRESS_7BIT;
    i2cConfigStruct.address1 = 0XC0;
    i2cConfigStruct.analogfilter = I2C_ANALOG_FILTER_ENABLE;
    i2cConfigStruct.digitalfilter = I2C_DIGITAL_FILTER_0;
    i2cConfigStruct.mode = I2C_MODE_I2C;
    i2cConfigStruct.timing = 0x1042F013;
    I2C_Config(I2C1,&i2cConfigStruct);

    /** Enable the I2C1 Interrupt */
 
    /** Enable I2Cx */
     I2C_Enable(I2C1);
 }
uint32_t I2C_Write(I2C_T *i2c,uint8_t driver_Addr, uint16_t start_Addr, uint8_t *Write_Buffer,uint8_t numb)
{
	uint8_t trans[2];
    trans[0]=start_Addr>>8;
    trans[1]=start_Addr;
    I2CTimeout = I2CT_LONG_TIMEOUT;
    /** Wait until I2C is idle */
    while(I2C_ReadStatusFlag(i2c,I2C_FLAG_BUSY) == SET)
    {
//       I2CInit();
//       if((I2CTimeout--) == 0) return I2C_TIMEOUT_UserCallback(1);
    }
    I2C_HandlingTransfer(i2c,driver_Addr,1,I2C_RELOAD_MODE_RELOAD,I2C_GENERATE_START_WRITE);
	I2CTimeout = I2CT_LONG_TIMEOUT;
	while(I2C_ReadStatusFlag(i2c,I2C_FLAG_TXINT) == RESET)
    {
//     if((I2CTimeout--) == 0) return I2C_TIMEOUT_UserCallback(2);
    }
	I2C_TxData(i2c,start_Addr>>8);
	I2CTimeout = I2CT_LONG_TIMEOUT;
	while(I2C_ReadStatusFlag(i2c,I2C_FLAG_TCRF) == RESET)
    {
//     if((I2CTimeout--) == 0) return I2C_TIMEOUT_UserCallback(2);
    }

	I2C_TxData(i2c,start_Addr);
	I2CTimeout = I2CT_LONG_TIMEOUT;
	while(I2C_ReadStatusFlag(i2c,I2C_FLAG_TCRF) == RESET)
    {
//     if((I2CTimeout--) == 0) return I2C_TIMEOUT_UserCallback(2);
    }
    I2C_HandlingTransfer(i2c,driver_Addr,numb,I2C_RELOAD_MODE_AUTOEND,I2C_GENERATE_NO_STARTSTOP);
	
	I2CTimeout = I2CT_LONG_TIMEOUT;
	while(I2C_ReadStatusFlag(i2c,I2C_FLAG_TXINT) == RESET)
    {
//     if((I2CTimeout--) == 0) return I2C_TIMEOUT_UserCallback(2);
    }
    while(numb)
    {
        I2C_TxData(i2c,*Write_Buffer++);
        I2CTimeout = I2CT_LONG_TIMEOUT;
        while(I2C_ReadStatusFlag(i2c,I2C_FLAG_TXBE) == RESET)
        {
//            if((I2CTimeout--) == 0) return I2C_TIMEOUT_UserCallback(2);
        }
		numb--;
    }
     /** I2C Generate Stop signal */
    I2C_EnableGenerateStop(i2c);

    I2CTimeout = I2CT_LONG_TIMEOUT;
    while(I2C_ReadStatusFlag(i2c,I2C_FLAG_STOP) == RESET)
    {
//        if((I2CTimeout--) == 0) return I2C_TIMEOUT_UserCallback(3);
    }
    return 0;
}

uint32_t I2C_Read(I2C_T *i2c,uint8_t driver_Addr, uint16_t start_Addr, uint8_t *read_Buffer,uint8_t numb)
{
	uint8_t trans[2];
    trans[0]=start_Addr>>8;
    trans[1]=start_Addr;
    I2CTimeout = I2CT_LONG_TIMEOUT;
    /** Wait until I2C is idle */
    while(I2C_ReadStatusFlag(i2c,I2C_FLAG_BUSY) == SET)
    {
//       if((I2CTimeout--) == 0) return I2C_TIMEOUT_UserCallback(1);
    }

    I2C_HandlingTransfer(i2c,driver_Addr,1,I2C_RELOAD_MODE_SOFTEND,I2C_GENERATE_START_WRITE);
	I2CTimeout = I2CT_LONG_TIMEOUT;
	while(I2C_ReadStatusFlag(i2c,I2C_FLAG_TXINT) == RESET)
    {
//     if((I2CTimeout--) == 0) return I2C_TIMEOUT_UserCallback(2);
    }
	I2C_TxData(i2c,trans[0]);

	I2CTimeout = I2CT_LONG_TIMEOUT;

	while(I2C_ReadStatusFlag(i2c,I2C_FLAG_TXCF) == RESET)
    {
//     if((I2CTimeout--) == 0) return I2C_TIMEOUT_UserCallback(2);
    }
	I2C_TxData(i2c,trans[1]);

	I2CTimeout = I2CT_LONG_TIMEOUT;

	while(I2C_ReadStatusFlag(i2c,I2C_FLAG_TXCF) == RESET)
    {
//     if((I2CTimeout--) == 0) return I2C_TIMEOUT_UserCallback(2);
    }
	I2CTimeout = I2CT_LONG_TIMEOUT;

    I2C_HandlingTransfer(i2c,driver_Addr,numb,I2C_RELOAD_MODE_AUTOEND,I2C_GENERATE_START_READ);
	while(numb)
	{
        I2CTimeout = I2CT_LONG_TIMEOUT;
        while(I2C_ReadStatusFlag(i2c,I2C_FLAG_RXBNE) == RESET)
        {
//            if((I2CTimeout--) == 0) return I2C_TIMEOUT_UserCallback(2);
        }
 
		*read_Buffer = I2C_RxData(I2C1);
		read_Buffer++;
		numb--;
	}
    I2CTimeout = I2CT_LONG_TIMEOUT;
    while(I2C_ReadStatusFlag(i2c,I2C_FLAG_STOP) == RESET)
    {
//        if((I2CTimeout--) == 0) return I2C_TIMEOUT_UserCallback(3);
    }
    return 0;
}
void I2C_BufferWritePage(I2C_T* i2c,uint8_t driver_Addr,uint8_t WriteAddr,uint8_t *pBuffer,uint32_t lenth)
{
	uint32_t page_remain = 64-WriteAddr%64;    //算出开始写入数据的某一页的剩余未写字节数
	if(page_remain>=lenth)    //该页剩余的空间足够写入这些数据时
	{
		page_remain=lenth;    //把写入长度赋值
	}
	while(1)
	{	
		/*kuaiye*/
//		I2C_EE_BufferWrite(i2c,pBuffer,DeviceAddr,WriteAddr,page_remain);
	    I2C_Write(i2c,driver_Addr,WriteAddr, pBuffer,page_remain);
		if(page_remain==lenth) break;   //判断是否写完，如果剩余的空间足够写入这些数据，就执行一次上面的函数，如果不够则进行下面的语句。
		
		WriteAddr+=page_remain;    //如果不相等说明len比page_remain大，则地址偏移已经写入的长度
		pBuffer+=page_remain;    //数据偏移
		lenth-=page_remain;   //总长度减去已经写入的长度
		if(lenth<64)   //判断剩余长度是否够写一整页，不够就赋值实际剩余长度，够就赋值64
		{
			page_remain=lenth;
		}
		else
		{
			page_remain=64;
		}
	}
}

